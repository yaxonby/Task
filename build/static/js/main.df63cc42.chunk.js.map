{"version":3,"sources":["Component/Login.js","Component/CreateNewTask.js","Component/ViewListTask.js","Component/FilterTask.js","App.js","serviceWorker.js","index.js"],"names":["Login","_this$props","this","props","administration","loginUsername","loginPassword","loginUserNameHandleChange","loginPasswordHandleChange","Entrance","react_default","a","createElement","className","type","value","onChange","placeholder","onClick","Component","CreateNewTask","username","email","text","image_path","userNameHandleChange","emailNandleChange","taskHandleChange","imageHandleChange","AddTaskToList","ViewListTask","list","viewTask","EditAdministrationTask","NumberEditTask","AddCompleteTask","SaveEditAdministrationTask","map","element","index","key","bind","id","src","alt","width","height","complete","FilterTask","NewStateFilter","self","listSort","sort","s","t","toLowerCase","b","status","viewNumberTask","setState","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","taskList","assertThisInitialized","loginUserNameHandleChang","event","target","newTask","newTaskAddToList","toConsumableArray","concat","newList","Login_Login","CreateNewTask_CreateNewTask","ViewListTask_ViewListTask","FilterTask_FilterTask","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df63cc42.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Component} from \"react\"\r\n\r\n\r\nexport default class Login extends Component {\r\n\t\r\n\trender () {\r\n\t\tconst {administration, loginUsername, loginPassword, loginUserNameHandleChange,\r\n\t\t\tloginPasswordHandleChange, Entrance}=this.props\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{administration ?  <div> Добро пожаловать, администратор. </div> :\r\n\t\t\t\t<div className=\"loginClass\">\r\n\t\t\t\t\tЛогин:    <input type=\"text\"  value={loginUsername} onChange={loginUserNameHandleChange} placeholder=\"Вася\"/>\r\n\t\t\t\t\tПароль:   <input type=\"text\"  value={loginPassword} onChange={loginPasswordHandleChange} placeholder=\"Пароль\"/>\r\n\t\t\t\t\t<button onClick={Entrance}> Войти </button>\r\n\t\t\t </div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from \"react\"\r\nimport {Component} from \"react\"\r\n\r\n\r\nexport default class CreateNewTask extends Component {\r\n\r\n\trender () {\r\n\t\tconst {username, email, text, image_path,\r\n\t\t\tuserNameHandleChange, emailNandleChange,\r\n\t\t\ttaskHandleChange, imageHandleChange, AddTaskToList}=this.props\r\n\t\treturn (\r\n\t\t\t<div>\r\n\r\n\t\t\t<label>\r\n\t\t\t\t\t<p><b>Новая задача</b></p>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\tИмя:   <input type=\"text\"  value={username} onChange={userNameHandleChange} placeholder=\"Вася\"/> <br />\r\n\t\t\t\t\t\tПочта:  <input type=\"email\"  value={email} onChange={emailNandleChange}  placeholder=\"email@mail.com\" /> <br />\r\n\t\t\t\t\t\tЗадача: <input type=\"text\"  value={text} onChange={taskHandleChange}  placeholder=\"Сходить в кино\"/> <br />\r\n\t\t\t\t\t\tЗагрузить иконку:  <input type=\"file\" value={image_path} onChange={imageHandleChange}/>\r\n\t\t\t\t </div>\r\n\t\t\t</label>\r\n\t\t\t<button onClick={AddTaskToList}> Предварительный просмотр</button>\r\n\t\t\t<button onClick={AddTaskToList}> Отправить задачу </button> <br /> <br />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from \"react\"\r\nimport {Component} from \"react\"\r\n\r\n\r\nexport default class ViewListTask extends Component {\r\n\r\n\trender () {\r\n\t\tconst {username, email, text, image_path, list, viewTask,\r\n\t\t\t\t\tuserNameHandleChange, emailNandleChange,taskHandleChange, imageHandleChange,\r\n\t\t\t\t\tadministration, EditAdministrationTask, NumberEditTask,\r\n\t\t\t\t\tAddCompleteTask, SaveEditAdministrationTask}=this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"ViewListTaskClass\">\r\n\t\t\t<ul className=\"ViewListTaskClassUl\">\r\n\r\n\t\t\t{list.map(function(element, index) {\r\n      if (index<(viewTask) &&  index>(viewTask-4))  {\r\n\t\t\t  return (\r\n          <li key={index} className=\"ViewListTaskClassLi\">\r\n\t\t\t    {administration ? <button onClick={EditAdministrationTask.bind(null, element)}> Редактировать </button> : <div> </div>}\r\n\t\t\t    {(NumberEditTask===element.id) ? <div>\r\n\t\t\t      <input type=\"text\"  value={username} onChange={userNameHandleChange} placeholder={element.username}/>\r\n\t\t\t      Почта  <input type=\"email\"  value={email} onChange={emailNandleChange}  placeholder={element.email} /> <br />\r\n\t\t\t      Задача <input type=\"text\"  value={text} onChange={taskHandleChange}  placeholder={element.text}/> <br />\r\n\t\t\t      Загрузить иконку  <input type=\"file\" value={image_path} onChange={imageHandleChange}/>  </div>:\r\n\t\t\t    element.username + element.email + element.text }\r\n\t\t\t    <img src={element.image_path} alt=\"картинка\" width=\"100px\" height=\"80px\"/>\r\n\t\t\t    <button onClick={AddCompleteTask.bind(null, element)}> {(element.complete)? \"выполнено\" : \"не выполнено\"} </button>\r\n\t\t\t      { administration ? <button onClick={SaveEditAdministrationTask.bind(null, element)}> Сохранить </button> : <div></div>}\r\n\t\t\t          </li>)}\r\n                else {\r\n                }\r\n\t\t\t        })}\r\n\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from \"react\"\r\nimport {Component} from \"react\"\r\n\r\n\r\nexport default class FilterTask extends Component {\r\n\r\n\trender () {\r\nconst {list, NewStateFilter, viewTask, self}=this.props\r\n\r\nfunction FilterStatusTaskList() {\r\n\t\tlet listSort=list.sort(function(a, b) {\r\n\t\t\t\t return a.status-b.status;\r\n\t\t\t });\r\n\t\t\tNewStateFilter(listSort)\r\n\t};\r\n\r\nfunction FilterUserNameList() {\r\n\t\t\t\t let listSort=list.sort(function(s,t) {\r\n\t\t\t\t let a = s.username.toLowerCase();\r\n\t\t\t\t let b = t.username.toLowerCase();\r\n\t\t\t\t if (a < b) return -1;\r\n\t\t\t\t if (a > b) return 1;\r\n\t\t\t\t return 0;\r\n\t\t\t\t });\r\n\t\t\tNewStateFilter(listSort)\r\n\t\t}\r\n\r\nfunction FilterEmailUserList(){\r\n\t\t// сортировка по почте\r\n\t\t\tlet listSort= list.sort(function(s,t) { // Сортировка без учета регистра символов\r\n\t\t\t\t let a = s.email.toLowerCase();\r\n\t\t\t\t let b = t.email.toLowerCase();\r\n\t\t\t\t if (a < b) return -1;\r\n\t\t\t\t if (a > b) return 1;\r\n\t\t\t\t return 0;\r\n\t\t\t\t });\r\n\tNewStateFilter(listSort)\r\n\t}\r\n\r\nfunction NextViewTask () {\r\nif (viewTask) {\r\nlet viewNumberTask=viewTask+3\r\nself.setState({\r\n\tviewTask: viewNumberTask\r\n})\r\n}\r\n};\r\n\r\nfunction PreviousViewTask () {\r\nif (viewTask) {\r\nlet viewNumberTask=viewTask-3\r\nself.setState({\r\n\tviewTask: viewNumberTask\r\n})\r\n}\r\n};\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"FilterTaskClass\">\r\n\t\t\t<button onClick={FilterUserNameList}> фильтр по имени пользователя </button>\r\n\t\t\t<button onClick={FilterEmailUserList}> фильтр по email пользователя </button>\r\n\t\t\t<button onClick={FilterStatusTaskList}> фильтр по статусу </button>\r\n<br /><br />\r\n       <p> Задачи</p>\r\n\t\t\t<button onClick={PreviousViewTask}> приведущие </button>\r\n\t\t\t<button onClick={NextViewTask}> следующие </button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\nimport Login from \"./Component/Login\";\nimport CreateNewTask from \"./Component/CreateNewTask\";\nimport ViewListTask from \"./Component/ViewListTask\";\nimport FilterTask  from \"./Component/FilterTask\";\n//import axios from \"axios\";\nimport './App.css';\n\n\nlet idTask=2;\nclass App extends Component {\n\nconstructor(props) {\nsuper(props)\n\nthis.state={ username: \"\", email:\"\", text:\"\", image_path:\"\",\nlist: this.props.taskList.list, loginUsername:\"\", loginPassword:\"\", administration: false,\nNumberEditTask: null, viewTask:3}\n\nthis.userNameHandleChange = this.userNameHandleChange.bind(this);\nthis.emailNandleChange = this.emailNandleChange.bind(this);\nthis.taskHandleChange = this.taskHandleChange.bind(this);\nthis.imageHandleChange = this.imageHandleChange.bind(this);\nthis.AddTaskToList = this.AddTaskToList.bind(this);\nthis.NewStateFilter=this.NewStateFilter.bind(this);\nthis.Entrance=this.Entrance.bind(this);\nthis.loginUserNameHandleChange=this.loginUserNameHandleChang.bind(this);\nthis.loginPasswordHandleChange=this.loginPasswordHandleChange.bind(this);\nthis.AddCompleteTask=this.AddCompleteTask.bind(this);\nthis.EditAdministrationTask=this.EditAdministrationTask.bind(this);\nthis.SaveEditAdministrationTask=this.SaveEditAdministrationTask.bind(this);\n//this.PreviousViewTask=this.PreviousViewTask.bind(this);\n//this.NextViewTask=this.NextViewTask.bind(this);\n  }\n\n  userNameHandleChange(event) {\n    this.setState({    username: event.target.value})\n  };\n\n  emailNandleChange(event) {\n    this.setState({      email: event.target.value  })\n  };\n  taskHandleChange(event) {\n    this.setState({      text: event.target.value  })\n  };\n  imageHandleChange(event) {\n    this.setState({        image_path: event.target.value    })\n  };\n\nAddTaskToList() {\n\n      let newTask={\n       id:  idTask,\n       username: this.state.username,\n       email: this.state.email,\n       text: this.state.text,\n       image_path: this.state.image_path,\n       complete: false\n      }\nlet newTaskAddToList=[ ...this.state.list, newTask     ]\nthis.setState({username: \"\", email:\"\", text:\"\", image_path:\"\",  list: newTaskAddToList  })\n    };\n\n    Entrance () {\n  if (this.state.loginUsername===\"admin\" && this.state.loginPassword===\"123\") {\n  this.setState({  administration: true})\n  }\n};\n\n  loginUserNameHandleChang(event) {\n    this.setState({  loginUsername: event.target.value  })\n  };\n\n  loginPasswordHandleChange(event) {\n    this.setState({  loginPassword: event.target.value  })\n};\n\nAddCompleteTask (element) {\n/* new при загрузке с сервера. Работает.\nlet newList=this.state.list\nlet indexStateList\nnewList.findIndex(function (elemarray, index, array) {\n  if (element.id==elemarray.id) {indexStateList=index}\n});\nconsole.log(indexStateList)\nconsole.log(element.id)\nconsole.log(this.state.list)\nconsole.log(this.state.list[indexStateList])\nnewList[indexStateList].complete=!newList[indexStateList].complete\n*/\n\n//old\nlet newList=this.state.list\n\nnewList[element.id].complete=!newList[element.id].complete\n  this.setState({    list: newList})\n};\n\nEditAdministrationTask (element) {\nthis.setState({    NumberEditTask: element.id});\n}\n\nSaveEditAdministrationTask (element) {\n  let newTask={\n   id:  element.id,\n   username: this.state.username,\n   email: this.state.email,\n   text: this.state.text,\n   image_path: this.state.image_path,\n   complete: element.complete\n  }\n\nlet newTaskAddToList=[ ...this.state.list]\nnewTaskAddToList[element.id]=newTask\nthis.setState({username: \"\", email:\"\", text:\"\", image_path:\"\", NumberEditTask: null,\nlist: newTaskAddToList  })\n};\n\nNewStateFilter(listSort) {\n   this.setState({list: listSort})\n };\n\n  render() {\n\n//    const self=this;\n//    function PreviewListTask() {    }\n\n    return (\n\n  <div>\n<Login\n    administration={this.state.administration}\n    loginUsername={this.state.loginUsername}\n    loginPassword={this.state.loginPassword}\n    loginUserNameHandleChange={this.loginUserNameHandleChange}\n    loginPasswordHandleChange={this.loginPasswordHandleChange}\n    Entrance={this.Entrance} />\n\n<CreateNewTask\n    username={this.state.username}\n    email={this.state.email}\n    text={this.state.text}\n    image_path={this.state.image_path}\n\n    AddTaskToList={this.AddTaskToList}\n    userNameHandleChange={this.userNameHandleChange}\n    emailNandleChange={this.emailNandleChange}\n    taskHandleChange={this.taskHandleChange}\n    imageHandleChange={this.imageHandleChange} />\n\n\n<ViewListTask\n  username={this.state.username}\n  email={this.state.email}\n  text={this.state.text}\n  image_path={this.state.image_path}\n  list={this.state.list}\n  NumberEditTask={this.state.NumberEditTask}\n  viewTask={this.state.viewTask}\n\n  administration={this.state.administration}\n  EditAdministrationTask={this.EditAdministrationTask}\n  userNameHandleChange={this.userNameHandleChange}\n  emailNandleChange={this.emailNandleChange}\n  imageHandleChange={this.imageHandleChange}\n  taskHandleChange={this.taskHandleChange}\n  AddCompleteTask={this.AddCompleteTask}\n  SaveEditAdministrationTask={this.SaveEditAdministrationTask}\n/>\n\n<FilterTask\nlist={this.state.list}\nNewStateFilter={this.NewStateFilter}\nviewTask={this.state.viewTask}\nself={this}\n\n/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import axios from \"axios\";\n\n\n//получение списка задач с сервера. Работает!\n/*\nconst request = new XMLHttpRequest();\nvar loadlistjson;\n\nfunction req() {\n    if (request.readyState == 4) {\n      const status = request.status;\n        if (status == 200) {\n        console.log(request.response);\n         loadlistjson = JSON.parse(request.response).message.tasks\n          console.log(loadlistjson)\n        } else { console.log(\"Ответ сервера \" + request.statusText)}\n    }\n}\n\nrequest.open(\"GET\", \"https://uxcandy.com/~shapoval/test-task-backend/?developer=yuriy\", false);\nrequest.onreadystatechange = req;\nrequest.send();\n\n  console.log(loadlistjson)\nfor (let i=0; i<loadlistjson.length; i++) {\n  loadlistjson[i].complete=false\n  console.log(typeof(loadlistjson[i].complete))\n}\n\nlet taskList={  list: loadlistjson};\n*/\n\n\n/*\n//Добавление задачи на сервер через axios. В разработке.\nfunction AddTaskToServer () {\n\n  axios.post('https://uxcandy.com/~shapoval/test-task-backend/create?developer=yuriy', {\n      username: \"Test User\",\n      email: \"test_user_1@example.com\",\n      text: \"Hello, world!\",\n      image_path: \"https://uxcandy.com/~shapoval/test-task-backend/upload/user_images/5900dfd7/1508836540_1.jpg\"\n  })\n  .then(function (response) {\n      console.log(response);\n  })\n  .catch(function (error) {\n      console.log(error);\n  });\n*/\n\n  /* добавление задач на сервер через XMLHttpRequest. В разработке.\n        const form = new FormData();\n        form.append(\"username\", \"yura\");\n        form.append(\"email\", \"yura@tut.com\");\n        form.append(\"text\", \"I am happy!\");\n        form.append(\"image\", \"https://uxcandy.com/~shapoval/test-task-backend/upload/user_images/5900dfd7/1508836540_1.jpg\");\n\n        const request = new XMLHttpRequest();\n        function reqReadyStateChange() {\n        if (request.readyState == 4 && request.status == 200)   console.log(request.response);\n        }\n        request.open(\"POST\", \"https://uxcandy.com/~shapoval/test-task-backend/create?developer=yuriy\");\n        request.setRequestHeader('Content-Type', 'multipart/form-data');\n        request.onreadystatechange = reqReadyStateChange;\n        console.log(form)\n        request.send(form);\n        */\n\n\nlet taskList={  list: [\n            {\"id\": 0,\n            \"username\": \"Test User\",\n            \"email\": \"test_user_1@example.com\",\n            \"text\": \"Hello, world!\",\n            \"status\": 10,\n            \"image_path\": \"https://uxcandy.com/~shapoval/test-task-backend/upload/user_images/5900dfd7/1508836540_1.jpg\",\n            \"complete\":false},\n           {\n          \"id\": 1,\n          \"username\": \"ATest User 2\",\n          \"email\": \"test_user_2@example.com\",\n          \"text\": \"Hello from user 2!\",\n          \"status\": 0,\n          \"image_path\": \"https://uxcandy.com/~shapoval/test-task-backend/upload/user_images/5900dfd7/1508836666_3.jpg\",\n          \"complete\":false\n          }\n                ]\n          };\n\n\nReactDOM.render(<App taskList={taskList}/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}